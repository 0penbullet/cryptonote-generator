{
  "file": "zawy-v1b-difficulty-algorithm.json",
  "description": "Add Zawy v1b difficulty algorithm option (https://github.com/monero-project/research-lab/issues/3)",
  "required": [
    "core/bytecoin.json",
    "versionized-parameters.json"
  ],
  "files": [
    {
      "path": "/src/CryptoNoteCore/Currency.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "size_t m_blockGrantedFullRewardZone;",
          "parameters": {
            "text": [
              "  bool m_zawyV1bDifficultyV2;",
              "  bool m_zawyV1bDifficultyV3;",
              "  bool m_zawyV1bDifficultyV4;"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "CurrencyBuilder& blockGrantedFullRewardZone(size_t val)",
          "parameters": {
            "text": [
              "  CurrencyBuilder& zawyV1bDifficultyV2(bool val) { m_currency.m_zawyV1bDifficultyV2 = val; return *this; }",
              "  CurrencyBuilder& zawyV1bDifficultyV3(bool val) { m_currency.m_zawyV1bDifficultyV3 = val; return *this; }",
              "  CurrencyBuilder& zawyV1bDifficultyV4(bool val) { m_currency.m_zawyV1bDifficultyV4 = val; return *this; }"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "size_t blockGrantedFullRewardZone()",
          "parameters": {
            "text": [
              "  bool zawyV1bDifficultyV2() const { return m_zawyV1bDifficultyV2; }",
              "  bool zawyV1bDifficultyV3() const { return m_zawyV1bDifficultyV3; }",
              "  bool zawyV1bDifficultyV4() const { return m_zawyV1bDifficultyV4; }"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/Currency.cpp",
      "changes": [
        {
          "action": "add_above",
          "marker": "blockGrantedFullRewardZone(parameters::CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE);",
          "parameters": {
            "text": [
              "zawyV1bDifficultyV2(parameters::ZAWY_V2B_DIFFICULTY_V2);",
              "zawyV1bDifficultyV3(parameters::ZAWY_V2B_DIFFICULTY_V3);",
              "zawyV1bDifficultyV4(parameters::ZAWY_V2B_DIFFICULTY_V4);"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "m_testnet(currency.m_testnet),",
          "parameters": {
            "text": [
              "m_zawyV1bDifficultyV2(currency.m_zawyV1bDifficultyV2),",
              "m_zawyV1bDifficultyV3(currency.m_zawyV1bDifficultyV3),",
              "m_zawyV1bDifficultyV4(currency.m_zawyV1bDifficultyV4),"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteConfig.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "const unsigned EMISSION_SPEED_FACTOR",
          "parameters": {
            "text": [
              "const bool ZAWY_V2B_DIFFICULTY_V2                          = %s;"
            ],
            "replace_text_alt": [
              "const bool ZAWY_V2B_DIFFICULTY_V2                          = 0;"
            ],
            "var": "ZAWY_V2B_DIFFICULTY_V2"
          }
        },
        {
          "action": "add_above",
          "marker": "const unsigned EMISSION_SPEED_FACTOR",
          "parameters": {
            "text": [
              "const bool ZAWY_V2B_DIFFICULTY_V3                          = %s;"
            ],
            "replace_text_alt": [
              "const bool ZAWY_V2B_DIFFICULTY_V3                          = 0;"
            ],
            "var": "ZAWY_V2B_DIFFICULTY_V3"
          }
        },
        {
          "action": "add_above",
          "marker": "const unsigned EMISSION_SPEED_FACTOR",
          "parameters": {
            "text": [
              "const bool ZAWY_V2B_DIFFICULTY_V4                          = %s;"
            ],
            "replace_text_alt": [
              "const bool ZAWY_V2B_DIFFICULTY_V4                          = 0;"
            ],
            "var": "ZAWY_V2B_DIFFICULTY_V4"
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/Currency.cpp",
      "changes": [
        {
          "action": "add_above",
          "marker": "return (low + timeSpan - 1) / timeSpan;  // with version",
          "parameters": {
            "text": [
              # D = difficulty, T = TargetInterval, TS = timestamp, TSL = timestamp limit

              N=17;  # can possibly range from N=4 to N>30.  N=17 seems to be a good idea.
              TSL=10 if N>10 else TSL = N; # stops miner w/ 50% from lowering  D>25% w/ forward TS's.
              current_TS=previous_TS + TSL*T if current_TS > previous_TS + TSL*T;
              current_TS=previous_TS - (TSL-1)*T if current_TS < previous_TS - (TSL-1)*T;
              next_D = sum(last N Ds) * T / [max(last N TSs) - min(last N TSs] / (1+0.693/N);
              next_D = previous_D*1.2 if next_D < 0;
              next_D = 2*previous_D  if next_D/previous_D > 2;
              next_D = 0.5*previous_D  if next_D/previous_D < 0.5;

                "  if (version >= 2 && m_zawyV1bDifficultyV2) {",
                "    if (high != 0) {",
                "      return 0;",
                "    }",
                "    uint64_t nextDiffZ = low / timeSpan;",
                "    if (nextDiffZ <= 100000) {",
                "      nextDiffZ = 100000;",
                "    }",
                "",
                "    return nextDiffZ;",
                "  }"
            ]
          }
        }
      ]
    }
  ]
}
