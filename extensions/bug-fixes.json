{
  "file": "bug-fixes.json",
  "description": "Fixing bugs in core",
  "required": [
    "core/bytecoin.json"
  ],
  "files": [
    {
      "path": "/src/Platform/OSX/System/Context.c",
      "changes": [
        {
          "action": "replace",
          "marker": "#include \"context.h\"",
          "parameters": {
            "text": [
              "#include \"Context.h\""
            ]
          }
        }
      ]
    },
    {
      "path": "/src/PaymentGate/WalletService.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "result.push_back(std::move(item));",
          "parameters": {
            "text": [
              "    if (!block.transactions.empty()) {",
              "      result.push_back(std::move(item));",
              "    }"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/SwappedMap.h",
      "changes": [
        {
          "action": "add_below",
          "marker": "#include <iomanip>",
          "parameters": {
            "text": [
              "#include <iostream>"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteProtocol/CryptoNoteProtocolHandler.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "return m_core.getTopBlockIndex() + 1;",
          "parameters": {
            "text": [
              "return m_core.getTopBlockIndex();"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/Rpc/RpcServer.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "res.start_height = startIndex + 1;",
          "parameters": {
            "text": [
              "  res.start_height = startIndex;"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "res.current_height = currentIndex + 1;",
          "parameters": {
            "text": [
              "  res.current_height = currentIndex;"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "res.height = m_core.getTopBlockIndex() + 1;",
          "parameters": {
            "text": [
              "  res.height = m_core.getTopBlockIndex();"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "newBlockMessage.current_blockchain_height = m_core.getTopBlockIndex() + 1;",
          "parameters": {
            "text": [
              "  newBlockMessage.current_blockchain_height = m_core.getTopBlockIndex();"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "uint32_t index = static_cast<uint32_t>(req.height) - 1;",
          "parameters": {
            "text": [
              "  uint32_t index = static_cast<uint32_t>(req.height);"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "assert(cachedBlock.getBlockIndex() == req.height - 1);",
          "parameters": {
            "text": [
              "  assert(cachedBlock.getBlockIndex() == req.height);"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/Daemon/DaemonCommandsHandler.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "if (height - 1 > m_core.getTopBlockIndex()) {",
          "parameters": {
            "text": [
              "  if (height > m_core.getTopBlockIndex()) {"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "std::cout << \"block wasn't found. Current block chain height: \" << m_core.getTopBlockIndex() + 1 << \", requested: \" << height << std::endl;",
          "parameters": {
            "text": [
              "std::cout << \"block wasn't found. Current block chain height: \" << m_core.getTopBlockIndex() << \", requested: \" << height << std::endl;"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "auto hash = m_core.getBlockHashByIndex(height - 1);",
          "parameters": {
            "text": [
              "  auto hash = m_core.getBlockHashByIndex(height);"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "print_as_json(m_core.getBlockByIndex(height - 1));",
          "parameters": {
            "text": [
              "  print_as_json(m_core.getBlockByIndex(height));"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/SimpleWallet/SimpleWallet.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "m_consoleHandler.setHandler(\"start_mining\", boost::bind(&simple_wallet::start_mining, this, _1), \"start_mining [<number_of_threads>] - Start mining in daemon\");",
          "parameters": {
            "text": [
              "  //m_consoleHandler.setHandler(\"start_mining\", boost::bind(&simple_wallet::start_mining, this, _1), \"start_mining [<number_of_threads>] - Start mining in daemon\");"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "m_consoleHandler.setHandler(\"stop_mining\", boost::bind(&simple_wallet::stop_mining, this, _1), \"Stop mining in daemon\");",
          "parameters": {
            "text": [
              "  //m_consoleHandler.setHandler(\"stop_mining\", boost::bind(&simple_wallet::stop_mining, this, _1), \"Stop mining in daemon\");"
            ]
          }
        }
      ]
    },
    
    {
      "path": "/src/Wallet/WalletGreen.h",
      "changes": [
        {
          "action": "add_below",
          "marker": "uint64_t m_upperTransactionSizeLimit;",
          "parameters": {
            "text": [
              "  uint32_t m_totalBlockCount;"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/Wallet/WalletGreen.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "sub.syncStart.height = 0;",
          "parameters": {
            "text": [
              "    sub.syncStart.height = m_totalBlockCount;"
            ]
          }
        },
        {
          "action": "add_below",
          "marker": "void WalletGreen::onSynchronizationProgressUpdated(uint32_t processedBlockCount, uint32_t totalBlockCount) {",
          "parameters": {
            "text": [
              "  m_totalBlockCount = totalBlockCount;"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "return doCreateAddress(spendPublicKey, spendSecretKey, 0);",
          "parameters": {
            "text": [
              "  uint64_t creationTimestamp = static_cast<uint64_t>(time(nullptr));",
              "  return doCreateAddress(spendPublicKey, spendSecretKey, creationTimestamp);"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "return doCreateAddress(spendPublicKey, NULL_SECRET_KEY, 0);",
          "parameters": {
            "text": [
              "  uint64_t creationTimestamp = static_cast<uint64_t>(time(nullptr));",
              "  return doCreateAddress(spendPublicKey, NULL_SECRET_KEY, creationTimestamp);"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/crypto/crypto.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "static void hash_data_to_ec(const uint8_t*, std::size_t, PublicKey&);",
          "parameters": {
            "text": [
              "    static KeyImage scalarmultKey(const KeyImage & P, const KeyImage & a);",
              "    friend KeyImage scalarmultKey(const KeyImage & P, const KeyImage & a);"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "inline void hash_data_to_ec(const uint8_t* data, std::size_t len, PublicKey& key) {",
          "parameters": {
            "text": [
              "  inline KeyImage scalarmultKey(const KeyImage & P, const KeyImage & a) {",
              "    return crypto_ops::scalarmultKey(P, a);",
              "  }",
              ""
            ]
          }
        }
      ]
    },
    {
      "path": "/src/crypto/crypto.cpp",
      "changes": [
        {
          "action": "add_above",
          "marker": "void crypto_ops::hash_data_to_ec(const uint8_t* data, std::size_t len, PublicKey& key) {",
          "parameters": {
            "text": [
              "    KeyImage crypto_ops::scalarmultKey(const KeyImage & P, const KeyImage & a) {",
              "        ge_p3 A;",
              "        ge_p2 R;",
              "// maybe use assert instead?",
              "        ge_frombytes_vartime(&A, reinterpret_cast<const unsigned char*>(&P));",
              "        ge_scalarmult(&R, reinterpret_cast<const unsigned char*>(&a), &A);",
              "        KeyImage aP;",
              "        ge_tobytes(reinterpret_cast<unsigned char*>(&aP), &R);",
              "        return aP;",
              "    }",
              ""
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/TransactionValidationErrors.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "INPUT_IDENTICAL_KEYIMAGES,",
          "parameters": {
            "text": [
              "  INPUT_INVALID_DOMAIN_KEYIMAGES,"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "case TransactionValidationError::INPUT_IDENTICAL_KEYIMAGES:",
          "parameters": {
            "text": [
              "      case TransactionValidationError::INPUT_INVALID_DOMAIN_KEYIMAGES: return \"Transaction uses key image not in the valid domain\";"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/Core.cpp",
      "changes": [
        {
          "action": "add_above",
          "marker": "uint64_t summaryInputAmount = 0;",
          "parameters": {
            "text": [
              "    // parameters used for the additional key_image check",
              "    static const Crypto::KeyImage Z = { {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } };",
              "    static const Crypto::KeyImage I = { {0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } };",
              "    static const Crypto::KeyImage L = { {0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10 } };",
              ""
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "if (std::find(++std::begin(in.outputIndexes), std::end(in.outputIndexes), 0) != std::end(in.outputIndexes)) {",
          "parameters": {
            "text": [
              "  // Fix discovered by Monero Lab and suggested by \"fluffypony\" (bitcointalk.org)",
              "  if (!(scalarmultKey(in.keyImage, L) == I)) {",
              "    return error::TransactionValidationError::INPUT_INVALID_DOMAIN_KEYIMAGES;",
              "  }",
              ""
            ]
          }
        }
      ]
    }
  ]
}