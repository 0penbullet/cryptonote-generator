{
  "file": "bug-fixes.json",
  "description": "Fixing bugs in core",
  "required": [
    "core/bytecoin.json"
  ],
  "files": [
    {
      "path": "/src/CryptoNoteCore/RocksDBWrapper.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "std::vector<std::pair<std::string, std::string>> rawData(std::move(batch.extractRawDataToInsert()));",
          "parameters": {
            "text": [
              "std::vector<std::pair<std::string, std::string>> rawData(batch.extractRawDataToInsert());"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteProtocol/CryptoNoteProtocolHandler.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "notification.txs = std::move(m_core.getPoolTransactionHashes());",
          "parameters": {
            "text": [
              "notification.txs = m_core.getPoolTransactionHashes();"
            ]
          }
        }
      ]
    },
    {
      "path": "/tests/Common/VectorMainChainStorage.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "return std::move(storage);",
          "parameters": {
            "text": [
              "return storage;"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/PaymentGate/WalletService.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "result.push_back(std::move(item));",
          "parameters": {
            "text": [
              "    if (!block.transactions.empty()) {",
              "      result.push_back(std::move(item));",
              "    }"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/SwappedMap.h",
      "changes": [
        {
          "action": "add_below",
          "marker": "#include <iomanip>",
          "parameters": {
            "text": [
              "#include <iostream>"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/DatabaseBlockchainCache.cpp",
      "changes": [
        {
          "action": "add_below",
          "marker": "uint32_t offset = std::max(static_cast<uint32_t>(blockIndex + 1 - count), cacheStart) - cacheStart;",
          "parameters": {
            "text": [
              "  if (offset == 0) {",
              "    ++offset;",
              "    ++cacheStart;",
              "  }"
            ]
          }
        },
        {
          "action": "add_below",
          "marker": "uint32_t toRead = blockIndex - readFrom + 1;",
          "parameters": {
            "text": [
              "  if (toRead != 0) {",
              "    toRead--;",
              "  }"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteProtocol/CryptoNoteProtocolHandler.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "return m_core.getTopBlockIndex() + 1;",
          "parameters": {
            "text": [
              "return m_core.getTopBlockIndex();"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/Rpc/RpcServer.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "res.start_height = startIndex + 1;",
          "parameters": {
            "text": [
              "  res.start_height = startIndex;"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "res.current_height = currentIndex + 1;",
          "parameters": {
            "text": [
              "  res.current_height = currentIndex;"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "res.height = m_core.getTopBlockIndex() + 1;",
          "parameters": {
            "text": [
              "  res.height = m_core.getTopBlockIndex();"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "newBlockMessage.current_blockchain_height = m_core.getTopBlockIndex() + 1;",
          "parameters": {
            "text": [
              "  newBlockMessage.current_blockchain_height = m_core.getTopBlockIndex();"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "uint32_t index = static_cast<uint32_t>(req.height) - 1;",
          "parameters": {
            "text": [
              "  uint32_t index = static_cast<uint32_t>(req.height);"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "assert(cachedBlock.getBlockIndex() == req.height - 1);",
          "parameters": {
            "text": [
              "  assert(cachedBlock.getBlockIndex() == req.height);"
            ]
          }
        }
      ]
    },

    {
      "path": "/src/Daemon/DaemonCommandsHandler.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "auto hash = m_core.getBlockHashByIndex(height - 1);",
          "parameters": {
            "text": [
              "  auto hash = m_core.getBlockHashByIndex(height);"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "print_as_json(m_core.getBlockByIndex(height - 1));",
          "parameters": {
            "text": [
              "  print_as_json(m_core.getBlockByIndex(height));"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/DatabaseBlockchainCache.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "cacheStart = 1;",
          "parameters": {
            "text": [
              "  cacheStart = 0;"
            ]
          }
        }
      ]
    }
  ]
}