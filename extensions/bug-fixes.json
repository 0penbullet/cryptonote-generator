{
  "file": "bug-fixes.json",
  "description": "Fixing bugs in core",
  "required": [
    "core/bytecoin.json"
  ],
  "files": [
    {
      "path": "/src/CryptoNoteCore/RocksDBWrapper.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "std::vector<std::pair<std::string, std::string>> rawData(std::move(batch.extractRawDataToInsert()));",
          "parameters": {
            "text": [
              "std::vector<std::pair<std::string, std::string>> rawData(batch.extractRawDataToInsert());"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteProtocol/CryptoNoteProtocolHandler.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "notification.txs = std::move(m_core.getPoolTransactionHashes());",
          "parameters": {
            "text": [
              "notification.txs = m_core.getPoolTransactionHashes();"
            ]
          }
        }
      ]
    },
    {
      "path": "/tests/Common/VectorMainChainStorage.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "return std::move(storage);",
          "parameters": {
            "text": [
              "return storage;"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/PaymentGate/WalletService.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "result.push_back(std::move(item));",
          "parameters": {
            "text": [
              "    if (!block.transactions.empty()) {",
              "      result.push_back(std::move(item));",
              "    }"
            ]
          }
        }
      ]
    },

    {
      "path": "/src/Rpc/RpcServer.cpp",
      "changes": [

        {
          "action": "add_below",
          "marker": "bool RpcServer::on_get_random_outs(const COMMAND_RPC_GET_RANDOM_OUTPUTS_FOR_AMOUNTS::request& req, COMMAND_RPC_GET_RANDOM_OUTPUTS_FOR_AMOUNTS::response& res) {",
          "parameters": {
            "text": [
              "std::cout << \"outs_count:\" << req.outs_count << std::endl;"
            ]
          }
        },

        {
          "action": "add_above",
          "marker": "std::vector<uint32_t> globalIndexes;",
          "parameters": {
            "text": [
              "std::cout << \"amount:\" << amount << std::endl;"
            ]
          }
        },

        {
          "action": "add_above",
          "marker": "res.outs.back().outs.push_back({globalIndexes[i], publicKeys[i]});",
          "parameters": {
            "text": [
              "std::cout << \"index:\" << globalIndexes[i] << \":\" << publicKeys[i] << std::endl;"
            ]
          }
        }
      ]
    }
  ]
}