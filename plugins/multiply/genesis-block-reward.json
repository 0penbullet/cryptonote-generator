{
    "file":"multiply/genesis-block-reward.json",
    "description":"Add the ability to premine in multiply",
    "required":[ "core/bytecoin.json", "genesis-block-reward.json", "multiply.json" ],
    "files": [ 
        {
            "path":"/src/Daemon/Daemon.cpp",
            "changes": [
                {
                    "action":"add_bellow",
                    "marker":"const command_line::arg_descriptor< std::vector<std::string> > arg_CHECKPOINT",
                    "parameters": {
                        "replace_text":[
                            "  const command_line::arg_descriptor<uint64_t>    arg_PREMINED_PERCENT  = {\"PREMINED_PERCENT\", \"uint64_t\", 0};"
                        ]
                    }
                },
                {
                    "action":"add_bellow",
                    "marker":"command_line::add_arg(desc_cmd_sett, arg_CHECKPOINT);",
                    "parameters": {
                        "replace_text":[
                            "    command_line::add_arg(desc_cmd_sett, arg_PREMINED_PERCENT);"
                        ]
                    }
                },
                {
                    "action":"replace",
                    "marker":"CryptoNote::Transaction tx = CryptoNote::CurrencyBuilder(logManager).generateGenesisTransaction(targets);",
                    "parameters": {
                        "replace_text":[
                            "  CryptoNote::CurrencyBuilder  currencyBuilder(logManager);",
                            "  currencyBuilder.genesisCoinbaseTxHex(command_line::get_arg(vm, arg_GENESIS_COINBASE_TX_HEX));",
                            "  currencyBuilder.publicAddressBase58Prefix(command_line::get_arg(vm, arg_CRYPTONOTE_PUBLIC_ADDRESS_BASE58_PREFIX));",
                            "  currencyBuilder.moneySupply(command_line::get_arg(vm, arg_MONEY_SUPPLY));",
                            "  currencyBuilder.emissionSpeedFactor(command_line::get_arg(vm, arg_EMISSION_SPEED_FACTOR));",
                            "  currencyBuilder.blockGrantedFullRewardZone(command_line::get_arg(vm, arg_CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE));",
                            "  currencyBuilder.blockGrantedFullRewardZoneV1(command_line::get_arg(vm, arg_CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE_V1));",
                            "  currencyBuilder.numberOfDecimalPlaces(command_line::get_arg(vm, arg_CRYPTONOTE_DISPLAY_DECIMAL_POINT));",
                            "  currencyBuilder.mininumFee(command_line::get_arg(vm, arg_MINIMUM_FEE));",
                            "  currencyBuilder.defaultDustThreshold(command_line::get_arg(vm, arg_DEFAULT_DUST_THRESHOLD));",
                            "  currencyBuilder.difficultyTarget(command_line::get_arg(vm, arg_DIFFICULTY_TARGET));",
                            "  currencyBuilder.minedMoneyUnlockWindow(command_line::get_arg(vm, arg_CRYPTONOTE_MINED_MONEY_UNLOCK_WINDOW));",
                            "  currencyBuilder.maxBlockSizeInitial(command_line::get_arg(vm, arg_MAX_BLOCK_SIZE_INITIAL));",
                            "  if (command_line::has_arg(vm, arg_EXPECTED_NUMBER_OF_BLOCKS_PER_DAY) && command_line::get_arg(vm, arg_EXPECTED_NUMBER_OF_BLOCKS_PER_DAY) != 0)",
                            "  {",
                            "    currencyBuilder.difficultyWindow(command_line::get_arg(vm, arg_EXPECTED_NUMBER_OF_BLOCKS_PER_DAY));",
                            "    currencyBuilder.upgradeVotingWindow(command_line::get_arg(vm, arg_EXPECTED_NUMBER_OF_BLOCKS_PER_DAY));",
                            "    currencyBuilder.upgradeWindow(command_line::get_arg(vm, arg_EXPECTED_NUMBER_OF_BLOCKS_PER_DAY));",
                            "  } else {",
                            "    currencyBuilder.difficultyWindow(24 * 60 * 60 / command_line::get_arg(vm, arg_DIFFICULTY_TARGET));",
                            "  }",
                            "  currencyBuilder.maxBlockSizeGrowthSpeedDenominator(365 * 24 * 60 * 60 / command_line::get_arg(vm, arg_DIFFICULTY_TARGET));",
                            "  currencyBuilder.lockedTxAllowedDeltaSeconds(command_line::get_arg(vm, arg_DIFFICULTY_TARGET) * CryptoNote::parameters::CRYPTONOTE_LOCKED_TX_ALLOWED_DELTA_BLOCKS);  ",
                            "  if (command_line::has_arg(vm, arg_UPGRADE_HEIGHT) && command_line::get_arg(vm, arg_UPGRADE_HEIGHT) != 0)",
                            "  {",
                            "    currencyBuilder.upgradeHeight(command_line::get_arg(vm, arg_UPGRADE_HEIGHT));",
                            "  }",
                            "  currencyBuilder.difficultyLag(command_line::get_arg(vm, arg_DIFFICULTY_LAG));",
                            "  currencyBuilder.difficultyCut(command_line::get_arg(vm, arg_DIFFICULTY_CUT));",
                            "  currencyBuilder.genesisBlockReward((command_line::get_arg(vm, arg_MONEY_SUPPLY) / 100) * command_line::get_arg(vm, arg_PREMINED_PERCENT));",
                            "  CryptoNote::Transaction tx = currencyBuilder.generateGenesisTransaction(targets);"
                        ]
                    }
                },
                {
                    "action":"add_above",
                    "marker":"currencyBuilder.testnet(testnet_mode);",
                    "parameters": {
                        "replace_text":[
                            "    currencyBuilder.genesisBlockReward((command_line::get_arg(vm, arg_MONEY_SUPPLY) / 100) * command_line::get_arg(vm, arg_PREMINED_PERCENT));"
                        ]
                    }
                }
            ]
        }
    ]
}