{
    "file":"print-genesis-tx.json",
    "description":"Adds --print-genesis-tx option to the daemon",
    "required":[ "core/bytecoin.json" ],
    "files": [ 
        {
            "path":"/src/daemon/daemon.cpp",
            "changes": [
                {
                    "action":"add_above",
                    "marker":"arg_testnet_on  = {",
                    "parameters": {
                        "replace_text":[
                            "  const command_line::arg_descriptor<bool>        arg_print_genesis_tx = { \"print-genesis-tx\", \"Prints genesis' block tx hex to insert it to config and exits\" };"
                        ]
                    }
                },
                {
                    "action":"add_bellow",
                    "marker":"command_line::add_arg(desc_cmd_sett, arg_testnet_on);",
                    "parameters": {
                        "replace_text":[
                            "command_line::add_arg(desc_cmd_sett, arg_print_genesis_tx);"
                        ]
                    }
                },
                {
                    "action":"add_bellow",
                    "marker":"currencyBuilder.testnet(testnet_mode);",
                    "parameters": {
                        "replace_text":[
                            "    try {",
                            "      currencyBuilder.currency();",
                            "    } catch (std::exception&) {",
                            "      std::cout << \"GENESIS_COINBASE_TX_HEX constant has an incorrect value. Please launch: \" << CryptoNote::CRYPTONOTE_NAME << \"d --\" << arg_print_genesis_tx.name;",
                            "      return 1;",
                            "    }"
                        ]
                    }
                },
                {
                    "action":"add_bellow",
                    "marker":"bool command_line_preprocessor(const boost::program_options::variables_map& vm, LoggerRef& logger);",
                    "parameters": {
                        "replace_text":[
                            "void print_genesis_tx_hex(const po::variables_map& vm, LoggerManager& logManager) {",
                            "  CryptoNote::Transaction tx = CryptoNote::CurrencyBuilder(logManager).generateGenesisTransaction();",
                            "  CryptoNote::blobdata txb = tx_to_blob(tx);",
                            "  std::string tx_hex = blobToHex(txb);",

                            "  std::cout << \"Modify this line into your coin configuration file as is: \" << std::endl;",
                            "  std::cout << \"\\\"GENESIS_COINBASE_TX_HEX\\\":\\\"\" << tx_hex << \"\\\",\" << std::endl;",

                            "  return;",
                            "}"
                        ]
                    }
                },
                {
                    "action":"add_bellow",
                    "marker":"po::notify(vm);",
                    "parameters": {
                        "replace_text":[
                            "      if (command_line::get_arg(vm, arg_print_genesis_tx)) {",
                            "        print_genesis_tx_hex(vm, logManager);",
                            "        return false;",
                            "      }"
                        ]
                    }
                }

            ]
        },
        {
            "path":"/src/cryptonote_core/Currency.h",
            "changes": [
                {
                    "action":"add_above",
                    "marker":"CurrencyBuilder& maxBlockNumber(uint64_t val) { m_currency.m_maxBlockHeight = val; return *this; }",
                    "parameters": {
                        "replace_text":[
                            "  Transaction generateGenesisTransaction();"
                        ]
                    }
                }
            ]
        },
        {
            "path":"/src/cryptonote_core/Currency.cpp",
            "changes": [
                {
                    "action":"add_above",
                    "marker":"CurrencyBuilder& CurrencyBuilder::emissionSpeedFactor(unsigned int val) {",
                    "parameters": {
                        "replace_text":[
                            "Transaction CurrencyBuilder::generateGenesisTransaction() {",
                            "  CryptoNote::Transaction tx;",
                            "  CryptoNote::AccountPublicAddress ac = boost::value_initialized<CryptoNote::AccountPublicAddress>();",
                            "  m_currency.constructMinerTx(0, 0, 0, 0, 0, ac, tx); // zero fee in genesis",

                            "  return tx;",
                            "}"
                        ]
                    }
                }
            ]
        }
    ]
}